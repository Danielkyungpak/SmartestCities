
﻿@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container" ng-controller="sdController as sdCtrl">
    <h2></h2>
</div>




@section scripts{
    <script type="text/javascript">
        (function () {

            angular.module("myApp")
                .factory('$sdService', SDService)

            SDService.$inject = ['$http'];

            function SDService($http) {
                var vm = this;
                return {
                    testCall: _testCall
                };


                function _testCall(pedAsset, startTime, endTime) {
                    vm.settings = {
                        "async": true,
                        "crossDomain": true,
                        "url": "https://ic-event-service.run.aws-usw02-pr.ice.predix.io/v2/assets/" + pedAsset + "/events?eventType=PKIN&startTime=" + startTime + "&endTime=" + endTime,
                        "method": "GET",
                        "headers": {
                            "authorization": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImxlZ2FjeS10b2tlbi1rZXkiLCJ0eXAiOiJKV1QifQ.eyJqdGkiOiJkMWViOGE3Njc1MmQ0NGU2Yjc4NjhhYzFiY2VlM2VjYyIsInN1YiI6ImhhY2thdGhvbiIsInNjb3BlIjpbInVhYS5yZXNvdXJjZSIsImllLWN1cnJlbnQuU0RTSU0tSUUtUFVCTElDLVNBRkVUWS5JRS1QVUJMSUMtU0FGRVRZLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEFSS0lORy5JRS1QQVJLSU5HLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEVERVNUUklBTi5JRS1QRURFU1RSSUFOLkxJTUlURUQuREVWRUxPUCJdLCJjbGllbnRfaWQiOiJoYWNrYXRob24iLCJjaWQiOiJoYWNrYXRob24iLCJhenAiOiJoYWNrYXRob24iLCJncmFudF90eXBlIjoiY2xpZW50X2NyZWRlbnRpYWxzIiwicmV2X3NpZyI6IjlmMWYyYzRkIiwiaWF0IjoxNDk4MTg1NDQxLCJleHAiOjE0OTg3OTAyNDEsImlzcyI6Imh0dHBzOi8vODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3LnByZWRpeC11YWEucnVuLmF3cy11c3cwMi1wci5pY2UucHJlZGl4LmlvL29hdXRoL3Rva2VuIiwiemlkIjoiODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3IiwiYXVkIjpbImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBBUktJTkcuSUUtUEFSS0lORy5MSU1JVEVEIiwiaWUtY3VycmVudC5TRFNJTS1JRS1QVUJMSUMtU0FGRVRZLklFLVBVQkxJQy1TQUZFVFkuTElNSVRFRCIsInVhYSIsImhhY2thdGhvbiIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBFREVTVFJJQU4uSUUtUEVERVNUUklBTi5MSU1JVEVEIl19.JFnC9pIy3Ru4SaVnoJNQUh8zJB9aFW5CKOUb1DT5kyZ7RCfQ-eyQe2Y7bZahXVwNMKg5RLjI5U3QuSnwSUVMHNZX1r7b_NWdtC62NjcEjwrwZDjiosEke5m8rNoZ6Y4gj-vPzUyHqe6shUKyXMvsode-sZ4nGJZQUlojdytqo2XzDYeQ2FIBvOsgICwS5Y5twlNfrzQx9DJz6RR49nLnsqMHMLRa-GVK3pXimavJIT-bCltSv1Z6AIew_lRyLZ7segkfx9JlwufyNUdXWyeGRI4-dAfB3QKgvdhp4GNUjTVYuSmeuPBtMeoYDHhpg8KcXyJiwauc-5_eivsMk7BtIA",
                            "predix-zone-id": "SDSIM-IE-PARKING"
                        }
                    }

                    return $http(vm.settings)
                        .then(getData)
                }
                function getData(response) {
                    return response.data;
                }

<br />
<br />
<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 600px;
        width: 375px;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #origin-input,
    #destination-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 200px;
    }

        #origin-input:focus,
        #destination-input:focus {
            border-color: #4d90fe;
        }

    #mode-selector {
        color: #fff;
        background-color: #4d90fe;
        margin-left: 12px;
        padding: 5px 11px 0px 11px;
    }

        #mode-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
</style>

<input id="origin-input" class="controls hidden" type="text"
       placeholder="Enter an origin location">
<br />
<input id="destination-input" class="controls" type="text"
       placeholder="Enter a destination location">

<div id="map"</div>

﻿<div class="container" ng-controller="sdController as sdCtrl">
    <h2></h2>
</div>
            };

        })();
    </script>



    <script language="javascript" type="text/javascript">

        (function () {
            "use strict";
            angular.module("myApp")
                .controller("sdController", SDController)

            SDController.$inject = ['$scope', '$sdService'];

            function SDController($scope, $sdService) {
                var vm = this;
                vm.$scope = $scope;
                vm.$sdService = $sdService;

                vm.fillConsole = _fillConsole;
                vm.pedAsset = "CAM-HYP1071-F";
                vm.startTime = 1497908264000;
                vm.endTime = 1497909114000;

                render();

                function render() {
                    return vm.$sdService.testCall(vm.pedAsset, vm.startTime, vm.endTime)
                        .then(vm.fillConsole)

                }
                //hello
                function _fillConsole(data) {
                    console.log(data);
                }
            }


@section scripts{
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyArNvDouaJ18l-jhl1GUJpHc1AcK13upZU&libraries=places&callback=initMap"
        async defer></script>

<script>
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    var placeId = null;

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            mapTypeControl: false,
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 13,
            placeId: null
        });
        var infoWindow = new google.maps.InfoWindow;

        //detectBrowser();

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                infoWindow.setPosition(pos);
                infoWindow.setContent('Current location.');
                infoWindow.open(map);
                map.setCenter(pos);

                console.log("navigator.geolocation", navigator.geolocation);

                map.placeId = navigator.geolocation.place_id;
            }, function () {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        } // navigator.geolocation

        console.log("map", map);
        new AutocompleteDirectionsHandler(map);
    } //initMap

    /**
     * ##constructor
    */
    function AutocompleteDirectionsHandler(map) {
        console.log("map inside autocomplete", map);

        console.log("placeId inside autocomplete", placeId);

        this.map = map;
        this.originPlaceId = placeId;
        this.destinationPlaceId = null;
        this.travelMode = 'DRIVING';
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        var modeSelector = document.getElementById('mode-selector');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, { placeIdOnly: true });
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, { placeIdOnly: true });

        //this.setupClickListener('changemode-driving', 'DRIVING');
        //this.setupClickListener('changemode-walking', 'WALKING');
        //this.setupClickListener('changemode-transit', 'TRANSIT');


        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
    } //AutocompleteDirectionsHandler

    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    AutocompleteDirectionsHandler.prototype.setupClickListener = function (id, mode) {
        var radioButton = document.getElementById(id);
        var me = this;
        radioButton.addEventListener('click', function () {
            me.travelMode = mode;
            me.route();
        });
    }; //setupClickListener

    AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function () {
            var place = autocomplete.getPlace();
            if (!place.place_id) {
                window.alert("Please select an option from the dropdown list.");
                return;
            }
            if (mode === 'ORIG') {
                me.originPlaceId = place.place_id;
            } else {
                me.destinationPlaceId = place.place_id;
            }
            me.route();
        });

    }; //setupPlaceChangedListener

    AutocompleteDirectionsHandler.prototype.route = function () {
        if (!this.originPlaceId || !this.destinationPlaceId) {
            return;
        }
        var me = this;

        this.directionsService.route({
            origin: { 'placeId': this.originPlaceId },
            destination: { 'placeId': this.destinationPlaceId },
            travelMode: this.travelMode
        }, function (response, status) {
            if (status === 'OK') {
                me.directionsDisplay.setDirections(response);
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }; //route

        //function detectBrowser() {
        //    var useragent = navigator.userAgent;
        //    var mapdiv = document.getElementById("map");

        //    if (useragent.indexOf('iPhone') != -1 || useragent.indexOf('Android') != -1) {
        //        mapdiv.style.width = '100%';
        //        mapdiv.style.height = '100%';
        //    } else {
        //        mapdiv.style.width = '600px';
        //        mapdiv.style.height = '800px';
        //    }
        //} //detectBrowser

</script>

<!--Get Current Address-->
<script type="text/javascript" charset="utf-8">

    $(document).ready(function () {
        var currgeocoder;


        //Set geo location lat and long
        navigator.geolocation.getCurrentPosition(function (position, html5Error) {

            geo_loc = processGeolocationResult(position); // get our location
            currLatLong = geo_loc.split(",");
            initializeCurrent(currLatLong[0], currLatLong[1]);

        });

        //Get geo location result
        function processGeolocationResult(position) {
            html5Lat = position.coords.latitude; //Get latitude
            html5Lon = position.coords.longitude; //Get longitude
            html5TimeStamp = position.timestamp; //Get timestamp
            html5Accuracy = position.coords.accuracy; //Get accuracy in meters
            return (html5Lat).toFixed(8) + ", " + (html5Lon).toFixed(8); //return the current location
        } //processGeolocationResult

        //Check value is present or not & call google api function
        function initializeCurrent(latcurr, longcurr) {
            currgeocoder = new google.maps.Geocoder();
            console.log(latcurr + "-- ######## --" + longcurr);

            $("#lnglat").html(latcurr + "," + longcurr);

            if (latcurr != '' && longcurr != '') {
                var myLatlng = new google.maps.LatLng(latcurr, longcurr);
                return getCurrentAddress(myLatlng);
            }
        } //initializeCurrent

        //Get current address
        function getCurrentAddress(location) {
            // grab geocode of your current location
            currgeocoder.geocode({
                'location': location

            }, function (results, status) {

                if (status == google.maps.GeocoderStatus.OK) {
                    console.log("current address obj", results[0]);

                    placeId = results[0].place_id;
                    console.log("placeId", placeId);

                    $("#origin-input").val(results[0].formatted_address);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        } //getCurrentAddress
    });

</script>

    <script type="text/javascript">
        (function () {

            angular.module("myApp").config(['$qProvider', function ($qProvider) {
                $qProvider.errorOnUnhandledRejections(false);
            }]);

            angular.module("myApp")
                .factory('$sdService', SDService)

            SDService.$inject = ['$http'];

            function SDService($http) {
                var vm = this;
                return {
                    testCall: _testCall
                };


                function _testCall() {
                    vm.settings = {
                        "async": true,
                        "crossDomain": true,
                        "url": "https://ic-event-service.run.aws-usw02-pr.ice.predix.io/v2/assets/CAM-HYP1071-F/events?eventType=PKIN&startTime=1497908264000&endTime=1497909114000",
                        "method": "GET",
                        "headers": {
                            "authorization": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImxlZ2FjeS10b2tlbi1rZXkiLCJ0eXAiOiJKV1QifQ.eyJqdGkiOiJkMWViOGE3Njc1MmQ0NGU2Yjc4NjhhYzFiY2VlM2VjYyIsInN1YiI6ImhhY2thdGhvbiIsInNjb3BlIjpbInVhYS5yZXNvdXJjZSIsImllLWN1cnJlbnQuU0RTSU0tSUUtUFVCTElDLVNBRkVUWS5JRS1QVUJMSUMtU0FGRVRZLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEFSS0lORy5JRS1QQVJLSU5HLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEVERVNUUklBTi5JRS1QRURFU1RSSUFOLkxJTUlURUQuREVWRUxPUCJdLCJjbGllbnRfaWQiOiJoYWNrYXRob24iLCJjaWQiOiJoYWNrYXRob24iLCJhenAiOiJoYWNrYXRob24iLCJncmFudF90eXBlIjoiY2xpZW50X2NyZWRlbnRpYWxzIiwicmV2X3NpZyI6IjlmMWYyYzRkIiwiaWF0IjoxNDk4MTg1NDQxLCJleHAiOjE0OTg3OTAyNDEsImlzcyI6Imh0dHBzOi8vODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3LnByZWRpeC11YWEucnVuLmF3cy11c3cwMi1wci5pY2UucHJlZGl4LmlvL29hdXRoL3Rva2VuIiwiemlkIjoiODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3IiwiYXVkIjpbImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBBUktJTkcuSUUtUEFSS0lORy5MSU1JVEVEIiwiaWUtY3VycmVudC5TRFNJTS1JRS1QVUJMSUMtU0FGRVRZLklFLVBVQkxJQy1TQUZFVFkuTElNSVRFRCIsInVhYSIsImhhY2thdGhvbiIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBFREVTVFJJQU4uSUUtUEVERVNUUklBTi5MSU1JVEVEIl19.JFnC9pIy3Ru4SaVnoJNQUh8zJB9aFW5CKOUb1DT5kyZ7RCfQ-eyQe2Y7bZahXVwNMKg5RLjI5U3QuSnwSUVMHNZX1r7b_NWdtC62NjcEjwrwZDjiosEke5m8rNoZ6Y4gj-vPzUyHqe6shUKyXMvsode-sZ4nGJZQUlojdytqo2XzDYeQ2FIBvOsgICwS5Y5twlNfrzQx9DJz6RR49nLnsqMHMLRa-GVK3pXimavJIT-bCltSv1Z6AIew_lRyLZ7segkfx9JlwufyNUdXWyeGRI4-dAfB3QKgvdhp4GNUjTVYuSmeuPBtMeoYDHhpg8KcXyJiwauc-5_eivsMk7BtIA",
                            "predix-zone-id": "SDSIM-IE-PARKING",
                            "cache-control": "no-cache",
                            "postman-token": "57df3e77-28a7-4284-5120-ee4ba306523e",
                            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Credentials": true,
                            "Access-Control-Allow-Methods": "GET,HEAD,OPTIONS,POST,PUT",
                            "Access-Control-Allow-Headers": "Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers"
                        }
                    }

                    return $http(vm.settings)
                        .then(getData)
                }
                function getData(response) {
                    console.log(JSON.parse(response));
                }

            };

        })();
    </script>

    <script language="javascript" type="text/javascript">

        (function () {
            "use strict";
            angular.module("myApp")
                .controller("sdController", SDController)

            SDController.$inject = ['$scope', '$sdService'];

            function SDController($scope, $sdService) {
                var vm = this;
                vm.$scope = $scope;
                vm.$sdService = $sdService;

                vm.fillConsole = _fillConsole;


                render();

                function render() {
                    return vm.$sdService.testCall()
                        .then(vm.fillConsole)

                }
                //hello
                function _fillConsole(data) {
                    console.log(data);
                }
            }

        })();
    </script>
}
>>>>>>> 3c292963a50ac450c5099b9b75d8b6569235b714
        })();
    </script>
}