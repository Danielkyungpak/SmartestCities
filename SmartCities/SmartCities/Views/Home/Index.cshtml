@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />
<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 300px;
        width: 345px;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #origin-input,
    #destination-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 200px;
    }

        #origin-input:focus,
        #destination-input:focus {
            border-color: #4d90fe;
        }

    #mode-selector {
        color: #fff;
        background-color: #4d90fe;
        margin-left: 12px;
        padding: 5px 11px 0px 11px;
    }

        #mode-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
</style>
<br />

<div class="container" ng-controller="sdController as sdCtrl">
    <div ng-repeat="item in sdCtrl.items">
        {{item}}
    </div>
    <!--Video Feed-->
    <div ng-show="sdCtrl.video" style="width:100%;height:0px;position:relative;padding-bottom:56.250%;">
    <iframe src="https://streamable.com/s/fag3o/awvgp" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe>
    </div>
    <button id="dismiss_incident" class="btn btn-danger btn-group-sm" ng-click="sdCtrl.dismissIncident()" ng-show="sdCtrl.video">Dismiss</button> <button id="alert_incident" class="btn btn-primary btn-group-sm" ng-show="sdCtrl.video">Alert</button>
    <!--Map with Inputs-->
    @*<input id="origin-input" class="controls" type="text"
           placeholder="Enter an origin location">*@
    <br />
    <input id="destination-input" class="controls" type="text"
           placeholder="Enter a destination location">
    @*<button id="destination-input-button" class="controls">Submit</button>*@
    <div id="map"></div>
</div>

@section scripts{
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyArNvDouaJ18l-jhl1GUJpHc1AcK13upZU&libraries=places&callback=initMap"
            async defer></script>
    <script>
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                mapTypeControl: false,
                center: { lat: -33.8688, lng: 151.2195 },
                zoom: 15
            });
            var infoWindow = new google.maps.InfoWindow;

            // Try HTML5 geolocation.
            if (navigator.geolocation) {

                navigator.geolocation.getCurrentPosition(function (position, html5Error) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    infoWindow.setPosition(pos);
                    infoWindow.setContent('Current location.');
                    infoWindow.open(map);
                    map.setCenter(pos);

                    console.log("navigator.geolocation", navigator.geolocation);

                    //Get geo location result
                    function processGeolocationResult(position) {
                        html5Lat = position.coords.latitude; //Get latitude
                        html5Lon = position.coords.longitude; //Get longitude
                        html5TimeStamp = position.timestamp; //Get timestamp
                        html5Accuracy = position.coords.accuracy; //Get accuracy in meters
                        return (html5Lat).toFixed(8) + ", " + (html5Lon).toFixed(8); //return the current location
                    } //processGeolocationResult

                    //Check value is present or not & call google api function
                    function initializeCurrent(latcurr, longcurr) {
                        currgeocoder = new google.maps.Geocoder();
                        console.log(latcurr + "-- ######## --" + longcurr);

                        $("#lnglat").html(latcurr + "," + longcurr);

                        if (latcurr != '' && longcurr != '') {
                            var myLatlng = new google.maps.LatLng(latcurr, longcurr);
                            return getCurrentAddress(myLatlng);
                        }
                    } //initializeCurrent

                    //Get current address
                    function getCurrentAddress(location) {
                        // grab geocode of your current location
                        currgeocoder.geocode({
                            'location': location

                        }, function (results, status) {

                            if (status == google.maps.GeocoderStatus.OK) {
                                console.log("current address obj", results[0]);

                                $("#origin-input").val(results[0].formatted_address);
                            } else {
                                alert('Geocode was not successful for the following reason: ' + status);
                            }
                        });
                    } //getCurrentAddress

                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            } // navigator.geolocation

            new AutocompleteDirectionsHandler(map);
        } //initMap

        /**
         * ##constructor
        */
        function AutocompleteDirectionsHandler(map) {
            this.map = map;
            this.originPlaceId = 'ChIJk0LUILBU2YARCxo448 - wbNs';
            this.destinationPlaceId = null;
            this.travelMode = 'DRIVING';
            var originInput = document.getElementById('origin-input');

            var destinationInput = document.getElementById('destination-input');

            //on click function to get destination
            $("#destination-input-button").on("click", onSubmitDestination)

            function onSubmitDestination() {
                var destinationInput = $('#destination-input').val();
                console.log("destinationInput", destinationInput);
            };

            var modeSelector = document.getElementById('mode-selector');
            this.directionsService = new google.maps.DirectionsService;
            this.directionsDisplay = new google.maps.DirectionsRenderer;
            this.directionsDisplay.setMap(map);

            var originAutocomplete = new google.maps.places.Autocomplete(
                originInput, { placeIdOnly: true });
            var destinationAutocomplete = new google.maps.places.Autocomplete(
                destinationInput, { placeIdOnly: true });

            this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
            this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
        } //AutocompleteDirectionsHandler

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        AutocompleteDirectionsHandler.prototype.setupClickListener = function (id, mode) {
            var radioButton = document.getElementById(id);
            var me = this;
            radioButton.addEventListener('click', function () {
                me.travelMode = mode;
                me.route();
            });
        }; //setupClickListener

        AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
            var me = this;
            autocomplete.bindTo('bounds', this.map);
            autocomplete.addListener('place_changed', function () {
                var place = autocomplete.getPlace();
                if (!place.place_id) {
                    window.alert("Please select an option from the dropdown list.");
                    return;
                }
                if (mode === 'ORIG') {
                    me.originPlaceId = place.place_id;
                } else {
                    me.destinationPlaceId = place.place_id;
                }
                me.route();
            });

        }; //setupPlaceChangedListener

        AutocompleteDirectionsHandler.prototype.route = function () {
            if (!this.originPlaceId || !this.destinationPlaceId) {
                return;
            }
            var me = this;

            this.directionsService.route({
                origin: { 'placeId': 'ChIJk0LUILBU2YARCxo448-wbNs' }, //this.originPlaceId
                destination: { 'placeId': this.destinationPlaceId },
                travelMode: this.travelMode
            }, function (response, status) {
                if (status === 'OK') {
                    me.directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }; //route
    </script>
    <script type="text/javascript">
        (function () {

            angular.module("myApp")
                .factory('$sdService', SDService)

            SDService.$inject = ['$http'];

            function SDService($http) {
                var vm = this;
                return {
                    testCall: _testCall
                };


                function _testCall(pedAsset, startTime, endTime) {
                    vm.settings = {
                        "async": true,
                        "crossDomain": true,
                        "url": "https://ic-event-service.run.aws-usw02-pr.ice.predix.io/v2/assets/" + pedAsset + "/events?eventType=PKIN&startTime=" + startTime + "&endTime=" + endTime,
                        "method": "GET",
                        "headers": {
                            "authorization": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImxlZ2FjeS10b2tlbi1rZXkiLCJ0eXAiOiJKV1QifQ.eyJqdGkiOiJkMWViOGE3Njc1MmQ0NGU2Yjc4NjhhYzFiY2VlM2VjYyIsInN1YiI6ImhhY2thdGhvbiIsInNjb3BlIjpbInVhYS5yZXNvdXJjZSIsImllLWN1cnJlbnQuU0RTSU0tSUUtUFVCTElDLVNBRkVUWS5JRS1QVUJMSUMtU0FGRVRZLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEFSS0lORy5JRS1QQVJLSU5HLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEVERVNUUklBTi5JRS1QRURFU1RSSUFOLkxJTUlURUQuREVWRUxPUCJdLCJjbGllbnRfaWQiOiJoYWNrYXRob24iLCJjaWQiOiJoYWNrYXRob24iLCJhenAiOiJoYWNrYXRob24iLCJncmFudF90eXBlIjoiY2xpZW50X2NyZWRlbnRpYWxzIiwicmV2X3NpZyI6IjlmMWYyYzRkIiwiaWF0IjoxNDk4MTg1NDQxLCJleHAiOjE0OTg3OTAyNDEsImlzcyI6Imh0dHBzOi8vODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3LnByZWRpeC11YWEucnVuLmF3cy11c3cwMi1wci5pY2UucHJlZGl4LmlvL29hdXRoL3Rva2VuIiwiemlkIjoiODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3IiwiYXVkIjpbImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBBUktJTkcuSUUtUEFSS0lORy5MSU1JVEVEIiwiaWUtY3VycmVudC5TRFNJTS1JRS1QVUJMSUMtU0FGRVRZLklFLVBVQkxJQy1TQUZFVFkuTElNSVRFRCIsInVhYSIsImhhY2thdGhvbiIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBFREVTVFJJQU4uSUUtUEVERVNUUklBTi5MSU1JVEVEIl19.JFnC9pIy3Ru4SaVnoJNQUh8zJB9aFW5CKOUb1DT5kyZ7RCfQ-eyQe2Y7bZahXVwNMKg5RLjI5U3QuSnwSUVMHNZX1r7b_NWdtC62NjcEjwrwZDjiosEke5m8rNoZ6Y4gj-vPzUyHqe6shUKyXMvsode-sZ4nGJZQUlojdytqo2XzDYeQ2FIBvOsgICwS5Y5twlNfrzQx9DJz6RR49nLnsqMHMLRa-GVK3pXimavJIT-bCltSv1Z6AIew_lRyLZ7segkfx9JlwufyNUdXWyeGRI4-dAfB3QKgvdhp4GNUjTVYuSmeuPBtMeoYDHhpg8KcXyJiwauc-5_eivsMk7BtIA",
                            "predix-zone-id": "SDSIM-IE-PARKING"
                        }
                    }

                    return $http(vm.settings)
                        .then(getData)
                }
                function getData(response) {
                    return response.data;
                }


            };

        })();
    </script>

<script type="text/javascript">
            (function () {

                angular.module("myApp")
                    .factory('$sdService', SDService)

                SDService.$inject = ['$http'];

                function SDService($http) {
                    var vm = this;
                    return {
                        testCall: _testCall
                    };


                    function _testCall(point1, point2, startTime, endTime) {

                        vm.settings = {
                            "async": true,
                            "crossDomain": true,
                            "url": "https://ic-event-service.run.aws-usw02-pr.ice.predix.io/v2/locations/events?eventType=PEDEVT&bbox=" + point1 + "%2C" + point2 + "&locationType=WALKWAY&startTime=" + startTime + "&endTime=" + endTime,
                            "method": "GET",
                            "headers": {
                                "authorization": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImxlZ2FjeS10b2tlbi1rZXkiLCJ0eXAiOiJKV1QifQ.eyJqdGkiOiJkMWViOGE3Njc1MmQ0NGU2Yjc4NjhhYzFiY2VlM2VjYyIsInN1YiI6ImhhY2thdGhvbiIsInNjb3BlIjpbInVhYS5yZXNvdXJjZSIsImllLWN1cnJlbnQuU0RTSU0tSUUtUFVCTElDLVNBRkVUWS5JRS1QVUJMSUMtU0FGRVRZLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEFSS0lORy5JRS1QQVJLSU5HLkxJTUlURUQuREVWRUxPUCIsImllLWN1cnJlbnQuU0RTSU0tSUUtUEVERVNUUklBTi5JRS1QRURFU1RSSUFOLkxJTUlURUQuREVWRUxPUCJdLCJjbGllbnRfaWQiOiJoYWNrYXRob24iLCJjaWQiOiJoYWNrYXRob24iLCJhenAiOiJoYWNrYXRob24iLCJncmFudF90eXBlIjoiY2xpZW50X2NyZWRlbnRpYWxzIiwicmV2X3NpZyI6IjlmMWYyYzRkIiwiaWF0IjoxNDk4MTg1NDQxLCJleHAiOjE0OTg3OTAyNDEsImlzcyI6Imh0dHBzOi8vODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3LnByZWRpeC11YWEucnVuLmF3cy11c3cwMi1wci5pY2UucHJlZGl4LmlvL29hdXRoL3Rva2VuIiwiemlkIjoiODkwNDA3ZDctZTYxNy00ZDcwLTk4NWYtMDE3OTJkNjkzMzg3IiwiYXVkIjpbImllLWN1cnJlbnQuU0RTSU0tSUUtVFJBRkZJQy5JRS1UUkFGRklDLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBBUktJTkcuSUUtUEFSS0lORy5MSU1JVEVEIiwiaWUtY3VycmVudC5TRFNJTS1JRS1QVUJMSUMtU0FGRVRZLklFLVBVQkxJQy1TQUZFVFkuTElNSVRFRCIsInVhYSIsImhhY2thdGhvbiIsImllLWN1cnJlbnQuU0RTSU0tSUUtRU5WSVJPTk1FTlRBTC5JRS1FTlZJUk9OTUVOVEFMLkxJTUlURUQiLCJpZS1jdXJyZW50LlNEU0lNLUlFLVBFREVTVFJJQU4uSUUtUEVERVNUUklBTi5MSU1JVEVEIl19.JFnC9pIy3Ru4SaVnoJNQUh8zJB9aFW5CKOUb1DT5kyZ7RCfQ-eyQe2Y7bZahXVwNMKg5RLjI5U3QuSnwSUVMHNZX1r7b_NWdtC62NjcEjwrwZDjiosEke5m8rNoZ6Y4gj-vPzUyHqe6shUKyXMvsode-sZ4nGJZQUlojdytqo2XzDYeQ2FIBvOsgICwS5Y5twlNfrzQx9DJz6RR49nLnsqMHMLRa-GVK3pXimavJIT-bCltSv1Z6AIew_lRyLZ7segkfx9JlwufyNUdXWyeGRI4-dAfB3QKgvdhp4GNUjTVYuSmeuPBtMeoYDHhpg8KcXyJiwauc-5_eivsMk7BtIA",
                                "predix-zone-id": "SDSIM-IE-PEDESTRIAN"
                            }
                        }

                        return $http(vm.settings)
                            .then(getData)
                    }
                    function getData(response) {
                        return response.data;
                    }


                };

            })();
</script>
<script language="javascript" type="text/javascript">

            (function () {
                "use strict";
                angular.module("myApp")
                    .controller("sdController", SDController)

                SDController.$inject = ['$scope', '$sdService', '$timeout'];

                function SDController($scope, $sdService, $timeout) {
                    var vm = this;
                    vm.$scope = $scope;
                    vm.$sdService = $sdService;

                    vm.fillConsole = _fillConsole;
                    vm.point1 = '33.109978%3A-117.327287';
                    vm.point2 = '32.539897%3A-116.835649';
                    //vm.startTime = moment(vm.today).unix() - 10000;
                    //vm.startTime = moment(vm.today).unix() - 1.21e+9;
                    //vm.endTime = moment(vm.today).unix() - 1;

                    //vm.startTime = 1497908264000 - 700000000;
                    vm.startTime = 1497908264000;
                    vm.endTime = 1497909114000;
                    vm.today = new Date();
                    vm.timeOut = _timeOut;
                    vm.items = [];

                    //16 interations run out of data
                    vm.timerNumber = 0;

                    // Video stuff
                    vm.video = true;
                    vm.dismissIncident = _dismissIncident;

                    render();

                    function render() {
                        return vm.$sdService.testCall(vm.point1, vm.point2, vm.startTime, vm.endTime)
                            .then(vm.fillConsole)

                    }//render

                    function _timeOut() {
                        $timeout(function () {
                            vm.$sdService.testCall(vm.point1, vm.point2, vm.startTime, vm.endTime)
                                .then(vm.fillConsole)
                        }, 3000);
                    } //_timeOut

                    function _fillConsole(data) {
                        for (var i = 0; i < data.content.length; i++) {
                            if (data.content[i].measures.speed < 3.3) {
                                vm.items.push(data.content[i]);
                                console.log(data.content[i]);
                            }
                        }

                        //vm.endTime = moment(vm.today).unix() + 10000;
                        //vm.startTime = moment(vm.today).unix();

                        //vm.endTime = vm.endTime + 10000000;
                        //vm.startTime = vm.startTime + 10000000;

                        vm.endTime = vm.endTime + 1000000;
                        vm.startTime = vm.startTime + 1000000;
                        vm.timerNumber++;

                        if (vm.timerNumber < 17) {
                            vm.timeOut();
                        }
                    } //_fillConsole

                    function _dismissIncident() {
                        vm.video = false;
                    } //_dismissIncident
                }
            })();

</script>

}
